(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{358:function(a,t,r){"use strict";r.r(t);var s=r(42),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"_2-js相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-js相关"}},[a._v("#")]),a._v(" 2. js相关")]),a._v(" "),r("h2",{attrs:{id:"_2-1-javascript创建对象的几种方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-javascript创建对象的几种方式"}},[a._v("#")]),a._v(" 2.1 Javascript创建对象的几种方式")]),a._v(" "),r("h4",{attrs:{id:"工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[a._v("#")]),a._v(" *工厂模式")]),a._v(" "),r("h4",{attrs:{id:"构造函数模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构造函数模式"}},[a._v("#")]),a._v(" *构造函数模式")]),a._v(" "),r("h4",{attrs:{id:"原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[a._v("#")]),a._v(" *原型模式")]),a._v(" "),r("h4",{attrs:{id:"混合构造函数和原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#混合构造函数和原型模式"}},[a._v("#")]),a._v(" *混合构造函数和原型模式")]),a._v(" "),r("h4",{attrs:{id:"动态原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态原型模式"}},[a._v("#")]),a._v(" *动态原型模式")]),a._v(" "),r("h4",{attrs:{id:"寄生构造函数模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#寄生构造函数模式"}},[a._v("#")]),a._v(" *寄生构造函数模式")]),a._v(" "),r("h4",{attrs:{id:"稳妥构造函数模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#稳妥构造函数模式"}},[a._v("#")]),a._v(" *稳妥构造函数模式")]),a._v(" "),r("h2",{attrs:{id:"_2-2-我们给一个dom同时绑定两个点击事件-一个用捕获-一个用冒泡-你来说下会执行几次事件-然后会先执行冒泡还是捕获"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-我们给一个dom同时绑定两个点击事件-一个用捕获-一个用冒泡-你来说下会执行几次事件-然后会先执行冒泡还是捕获"}},[a._v("#")]),a._v(" 2.2 我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡，你来说下会执行几次事件，然后会先执行冒泡还是捕获")]),a._v(" "),r("h4",{attrs:{id:"addeventlistener绑定几次就执行几次-即便绑定的函数一样也会多次执行-结果应该是先显示捕捉再显示冒泡"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#addeventlistener绑定几次就执行几次-即便绑定的函数一样也会多次执行-结果应该是先显示捕捉再显示冒泡"}},[a._v("#")]),a._v(" addEventListener绑定几次就执行几次，即便绑定的函数一样也会多次执行，结果应该是先显示捕捉再显示冒泡")]),a._v(" "),r("h2",{attrs:{id:"_2-3-javascript的原型-原型链都有什么特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-javascript的原型-原型链都有什么特点"}},[a._v("#")]),a._v(" 2.3 JavaScript的原型，原型链都有什么特点？")]),a._v(" "),r("h4",{attrs:{id:"原型对象也是普通的对象-是对象一个自带隐式的-proto-属性-原型也有可能有自己的原型-如果一个原型对象的原型不为null的话-我们就称之为原型链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型对象也是普通的对象-是对象一个自带隐式的-proto-属性-原型也有可能有自己的原型-如果一个原型对象的原型不为null的话-我们就称之为原型链"}},[a._v("#")]),a._v(" *原型对象也是普通的对象，是对象一个自带隐式的__proto__ 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链")]),a._v(" "),r("h4",{attrs:{id:"原型链是由一些用来继承和共享属性的对象组成的-有限的-对象链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链是由一些用来继承和共享属性的对象组成的-有限的-对象链"}},[a._v("#")]),a._v(" *原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链")]),a._v(" "),r("h2",{attrs:{id:"_2-4-dom加载过程是怎么样的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-dom加载过程是怎么样的"}},[a._v("#")]),a._v(" 2.4 DOM加载过程是怎么样的")]),a._v(" "),r("h4",{attrs:{id:"解析html结构。加载外部脚本和样式表文件。解析并执行脚本代码。构造html-dom模型。加载图片等外部文件。页面加载完毕。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解析html结构。加载外部脚本和样式表文件。解析并执行脚本代码。构造html-dom模型。加载图片等外部文件。页面加载完毕。"}},[a._v("#")]),a._v(" 解析HTML结构。加载外部脚本和样式表文件。解析并执行脚本代码。构造HTML DOM模型。加载图片等外部文件。页面加载完毕。")]),a._v(" "),r("h2",{attrs:{id:"_2-5-解释一下javascript的同源策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-解释一下javascript的同源策略"}},[a._v("#")]),a._v(" 2.5 解释一下JavaScript的同源策略")]),a._v(" "),r("h4",{attrs:{id:"这里的同源策略指的是-协议-域名-端口相同。同源策略是一种安全协议-指一段脚本只能读取来自同一来源的窗口和文档的属性。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#这里的同源策略指的是-协议-域名-端口相同。同源策略是一种安全协议-指一段脚本只能读取来自同一来源的窗口和文档的属性。"}},[a._v("#")]),a._v(" 这里的同源策略指的是：协议，域名，端口相同。同源策略是一种安全协议:指一段脚本只能读取来自同一来源的窗口和文档的属性。")]),a._v(" "),r("h2",{attrs:{id:"_2-6-javascript-中有几种数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-javascript-中有几种数据类型"}},[a._v("#")]),a._v(" 2.6 JavaScript 中有几种数据类型")]),a._v(" "),r("h4",{attrs:{id:"数据类型可以分为基本数据类型和引用数据类型。基本数据类型-string、number、boolean-、null、undefined、symbol、bigint-引用数据类型-object。有些小伙伴喜欢把引用数据类型这块分为-object-和-funtion-这也是可以的-主要是-typeof可以检测function-还有就是function这个类比较特殊-。其中-symbol、bigint-是新增的数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据类型可以分为基本数据类型和引用数据类型。基本数据类型-string、number、boolean-、null、undefined、symbol、bigint-引用数据类型-object。有些小伙伴喜欢把引用数据类型这块分为-object-和-funtion-这也是可以的-主要是-typeof可以检测function-还有就是function这个类比较特殊-。其中-symbol、bigint-是新增的数据类型"}},[a._v("#")]),a._v(" 数据类型可以分为基本数据类型和引用数据类型。基本数据类型 ：String、Number、Boolean 、Null、Undefined、Symbol、BigInt ;引用数据类型：Object。有些小伙伴喜欢把引用数据类型这块分为 Object 和 Funtion，这也是可以的，(主要是 typeof可以检测function,还有就是Function这个类比较特殊)。其中 Symbol、BigInt 是新增的数据类型")]),a._v(" "),r("h2",{attrs:{id:"_2-7-javascript-如何让alert弹出框中的信息换行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-javascript-如何让alert弹出框中的信息换行"}},[a._v("#")]),a._v(" 2.7 JavaScript 如何让alert弹出框中的信息换行")]),a._v(" "),r("h4",{attrs:{id:"利用-n-来实现换行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#利用-n-来实现换行"}},[a._v("#")]),a._v(" 利用 \\n 来实现换行；")]),a._v(" "),r("h4",{attrs:{id:"例如-alert-找找找-n公公公-n作作作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例如-alert-找找找-n公公公-n作作作"}},[a._v("#")]),a._v(" 例如：alert('找找找\\n公公公\\n作作作')")]),a._v(" "),r("h2",{attrs:{id:"_2-8-javascript实现输出document对象中所有成员的名称和类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-javascript实现输出document对象中所有成员的名称和类型"}},[a._v("#")]),a._v(" 2.8 JavaScript实现输出document对象中所有成员的名称和类型")]),a._v(" "),r("h4",{attrs:{id:"document是一个对象-需要输出所有可枚举的key和vulue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#document是一个对象-需要输出所有可枚举的key和vulue"}},[a._v("#")]),a._v(" document是一个对象，需要输出所有可枚举的key和vulue;")]),a._v(" "),r("h4",{attrs:{id:"可以使用-for-in"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#可以使用-for-in"}},[a._v("#")]),a._v(" 可以使用 for in;")]),a._v(" "),r("h2",{attrs:{id:"_2-9-对javascript中函数绑定的理解-函数绑定可以使用哪两个函数-函数绑定一般使用在什么情况下-这两个函数的区别是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-对javascript中函数绑定的理解-函数绑定可以使用哪两个函数-函数绑定一般使用在什么情况下-这两个函数的区别是什么"}},[a._v("#")]),a._v(" 2.9 对JavaScript中函数绑定的理解；函数绑定可以使用哪两个函数？函数绑定一般使用在什么情况下？这两个函数的区别是什么？")]),a._v(" "),r("h4",{attrs:{id:"当对象借用方法时可以用call或apply。apply最多有2个参数-第一个参数是借用对象-第二个参数是数组类型。call第一个参数为借用对象-后面的参数个数不限-都作为参数传递给被借用方法。注意-内置对象arguments不是数组类型-是类数组-类数组转换为数组常用call和apply。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#当对象借用方法时可以用call或apply。apply最多有2个参数-第一个参数是借用对象-第二个参数是数组类型。call第一个参数为借用对象-后面的参数个数不限-都作为参数传递给被借用方法。注意-内置对象arguments不是数组类型-是类数组-类数组转换为数组常用call和apply。"}},[a._v("#")]),a._v(" 当对象借用方法时可以用call或apply。apply最多有2个参数,第一个参数是借用对象,第二个参数是数组类型。call第一个参数为借用对象,后面的参数个数不限,都作为参数传递给被借用方法。注意：内置对象arguments不是数组类型,是类数组,类数组转换为数组常用call和apply。")]),a._v(" "),r("h2",{attrs:{id:"_2-10-javascript-和-表示什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-javascript-和-表示什么"}},[a._v("#")]),a._v(" 2.10 JavaScript []和{}表示什么?")]),a._v(" "),r("h4",{attrs:{id:"表示数组-表示对象-这2种声明方式都为字面量方式。除了字面量方式外还可以用new-array及new-object来实例化。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#表示数组-表示对象-这2种声明方式都为字面量方式。除了字面量方式外还可以用new-array及new-object来实例化。"}},[a._v("#")]),a._v(" []表示数组,{}表示对象,这2种声明方式都为字面量方式。除了字面量方式外还可以用new Array及new Object来实例化。")]),a._v(" "),r("h2",{attrs:{id:"_2-11-javascript-什么叫全局变量-什么叫局部变量了-是如何定义出来的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-javascript-什么叫全局变量-什么叫局部变量了-是如何定义出来的"}},[a._v("#")]),a._v(" 2.11 JavaScript 什么叫全局变量?什么叫局部变量了?是如何定义出来的?")]),a._v(" "),r("h4",{attrs:{id:"全局变量是在函数外部定义的变量-在js中全局变量属于window对象-其作用域是整个源程序-全局变量全部存放在静态存储区-在程序开始执行时给全局变量分配存储区-程序运行完毕就释放。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#全局变量是在函数外部定义的变量-在js中全局变量属于window对象-其作用域是整个源程序-全局变量全部存放在静态存储区-在程序开始执行时给全局变量分配存储区-程序运行完毕就释放。"}},[a._v("#")]),a._v(" 全局变量是在函数外部定义的变量,在JS中全局变量属于window对象,其作用域是整个源程序,全局变量全部存放在静态存储区,在程序开始执行时给全局变量分配存储区,程序运行完毕就释放。")]),a._v(" "),r("h4",{attrs:{id:"局部变量是相对与全局变量而言的-在特定过程或函数中可以访问的变量-作用域较小-当函数运行结束释放局部变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#局部变量是相对与全局变量而言的-在特定过程或函数中可以访问的变量-作用域较小-当函数运行结束释放局部变量"}},[a._v("#")]),a._v(" 局部变量是相对与全局变量而言的,在特定过程或函数中可以访问的变量,作用域较小,当函数运行结束释放局部变量")]),a._v(" "),r("h2",{attrs:{id:"_2-12-javascript-nan是什么意思-这个值有什么特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-12-javascript-nan是什么意思-这个值有什么特点"}},[a._v("#")]),a._v(" 2.12 JavaScript NaN是什么意思?这个值有什么特点？")]),a._v(" "),r("h4",{attrs:{id:"nan-表示不是一个数-但是它本身是-number-类型。nan-和-number-不相等"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nan-表示不是一个数-但是它本身是-number-类型。nan-和-number-不相等"}},[a._v("#")]),a._v(" NaN 表示不是一个数,但是它本身是 number 类型。NaN 和 Number 不相等")]),a._v(" "),r("h2",{attrs:{id:"_2-13-闭包的概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-13-闭包的概念"}},[a._v("#")]),a._v(" 2.13 闭包的概念？")]),a._v(" "),r("h4",{attrs:{id:"闭包是指有权访问另一个函数作用域中的变量的函数-并且在闭包内部形成一个外部无法访问的局部作用域。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包是指有权访问另一个函数作用域中的变量的函数-并且在闭包内部形成一个外部无法访问的局部作用域。"}},[a._v("#")]),a._v(" 闭包是指有权访问另一个函数作用域中的变量的函数，并且在闭包内部形成一个外部无法访问的局部作用域。")]),a._v(" "),r("h5",{attrs:{id:"创建闭包的常见方式是在一个函数内部创建另一个函数。通过另一个函数访问这个函数的局部变量-利用闭包可以突破作用链域-将函数内部的变量和方法传递到外部。如果闭包中有引用类型的数据被使用-那么整个闭包都无法释放-占用内存。闭包一般用在选项卡那类的异步操作-还有定时器的时候用-因为这时候闭包所产生的作用域不销毁-如果用let声明变量-用this-index来代替闭包-性能会好很多"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建闭包的常见方式是在一个函数内部创建另一个函数。通过另一个函数访问这个函数的局部变量-利用闭包可以突破作用链域-将函数内部的变量和方法传递到外部。如果闭包中有引用类型的数据被使用-那么整个闭包都无法释放-占用内存。闭包一般用在选项卡那类的异步操作-还有定时器的时候用-因为这时候闭包所产生的作用域不销毁-如果用let声明变量-用this-index来代替闭包-性能会好很多"}},[a._v("#")]),a._v(" 创建闭包的常见方式是在一个函数内部创建另一个函数。通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。如果闭包中有引用类型的数据被使用,那么整个闭包都无法释放,占用内存。闭包一般用在选项卡那类的异步操作,还有定时器的时候用;因为这时候闭包所产生的作用域不销毁,如果用let声明变量，用this.index来代替闭包,性能会好很多;")]),a._v(" "),r("h2",{attrs:{id:"_2-14-javascript-null和undefined的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-14-javascript-null和undefined的区别"}},[a._v("#")]),a._v(" 2.14 JavaScript null和undefined的区别?")]),a._v(" "),r("h4",{attrs:{id:"null是一个表示-无-的对象-转为数值时为0undefined是一个表示-无-的原始值-转为数值时为nan-当声明的变量还未被初始化时-变量的默认值为undefined-null用来表示尚未存在的对象-常用来表示函数企图返回一个不存在的对象-注意-在验证null时-一定要使用-因为-无法分别-null-和-undefined"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#null是一个表示-无-的对象-转为数值时为0undefined是一个表示-无-的原始值-转为数值时为nan-当声明的变量还未被初始化时-变量的默认值为undefined-null用来表示尚未存在的对象-常用来表示函数企图返回一个不存在的对象-注意-在验证null时-一定要使用-因为-无法分别-null-和-undefined"}},[a._v("#")]),a._v(" null是一个表示”无”的对象,转为数值时为0undefined是一个表示”无”的原始值,转为数值时为NaN;当声明的变量还未被初始化时,变量的默认值为undefined;null用来表示尚未存在的对象,常用来表示函数企图返回一个不存在的对象;注意：在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined")]),a._v(" "),r("h2",{attrs:{id:"_2-15-字符串方法indexof和lastindexof的功能是什么-有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-15-字符串方法indexof和lastindexof的功能是什么-有什么区别"}},[a._v("#")]),a._v(" 2.15 字符串方法indexOf和lastIndexOf的功能是什么？有什么区别?")]),a._v(" "),r("h4",{attrs:{id:"indexof-从前向后检索-返回某个指定的字符串值在字符串中首次出现的位置。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#indexof-从前向后检索-返回某个指定的字符串值在字符串中首次出现的位置。"}},[a._v("#")]),a._v(" indexOf() 从前向后检索，返回某个指定的字符串值在字符串中首次出现的位置。")]),a._v(" "),r("h4",{attrs:{id:"lastindexof-从后向面检索-返回某个指定的字符串值在字符串中首次出现的位置-输出正向索引。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lastindexof-从后向面检索-返回某个指定的字符串值在字符串中首次出现的位置-输出正向索引。"}},[a._v("#")]),a._v(" lastIndexOf() 从后向面检索，返回某个指定的字符串值在字符串中首次出现的位置，输出正向索引。")]),a._v(" "),r("h2",{attrs:{id:"_2-16-事件冒泡机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-16-事件冒泡机制"}},[a._v("#")]),a._v(" 2.16 事件冒泡机制？")]),a._v(" "),r("h4",{attrs:{id:"事件传播机制-不管是dom0还是dom2-这个机制是天生就带的-当触发底层元素的某一个事件行为-那么它的上级元素的对应事件行为也会一级级的触发-一直出发到我们的document"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件传播机制-不管是dom0还是dom2-这个机制是天生就带的-当触发底层元素的某一个事件行为-那么它的上级元素的对应事件行为也会一级级的触发-一直出发到我们的document"}},[a._v("#")]),a._v(" 事件传播机制（不管是DOM0还是DOM2，这个机制是天生就带的）；当触发底层元素的某一个事件行为，那么它的上级元素的对应事件行为也会一级级的触发，一直出发到我们的document；")]),a._v(" "),r("h2",{attrs:{id:"_2-17-javascript-说出常用的数字方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-17-javascript-说出常用的数字方法"}},[a._v("#")]),a._v(" 2.17 JavaScript 说出常用的数字方法")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("Math.abs(-55);//绝对值，返回结果为55\nMath.ceil(2.1);//向上取整 3\nMath.round(2.3)//四舍五入结果为2\nMath.round(2.6)//四舍五入结果为3\nMath.floor(2.9);// 向下取整 2\nMath.floor(-2.9);// 向下取整 -3\nMath.random();//随机数，是个0~1之间的数，取1-100之间的随机正数： n=Math.random()*100;//n>0 n<100\nMath.max(x,y,z);//获取最大值，可以有n个参数 不一定是2个\nMath.min(x,y,z,w);//获取最小值\n还有一些不是那么常用的\n\nMath.sqrt(3);//开平方 1.732……..\nMath.pow(2,2);//2的2次方 为4\nMath.sin(number);\nMath.cos(number);\n")])])]),r("h2",{attrs:{id:"_2-18-删除数组中的第m项到第n项-用什么方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-18-删除数组中的第m项到第n项-用什么方法"}},[a._v("#")]),a._v(" 2.18 删除数组中的第m项到第n项，用什么方法")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("splice(index,count,ele1,...,ele2);//index是起始索引，count表示从index开始要删除的个数，后面的参数表示从index开始插入的值\n")])])]),r("h2",{attrs:{id:"_2-19-this指向"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-19-this指向"}},[a._v("#")]),a._v(" 2.19 this指向？")]),a._v(" "),r("h4",{attrs:{id:"谁调用了方法-该方法的this就指向谁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#谁调用了方法-该方法的this就指向谁"}},[a._v("#")]),a._v(" 谁调用了方法，该方法的this就指向谁;")]),a._v(" "),r("h4",{attrs:{id:"优先级-箭头函数-new绑定-显示绑定-隐式绑定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优先级-箭头函数-new绑定-显示绑定-隐式绑定"}},[a._v("#")]),a._v(" 优先级：箭头函数 > new绑定 > 显示绑定 > 隐式绑定")]),a._v(" "),r("h2",{attrs:{id:"_2-20-for-in-和-for-of的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-20-for-in-和-for-of的区别"}},[a._v("#")]),a._v(" 2.20 for in 和 for of的区别？")]),a._v(" "),r("h4",{attrs:{id:"for-in遍历数组会遍历到数组原型上的属性和方法-更适合遍历对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#for-in遍历数组会遍历到数组原型上的属性和方法-更适合遍历对象"}},[a._v("#")]),a._v(" for in遍历数组会遍历到数组原型上的属性和方法, 更适合遍历对象")]),a._v(" "),r("h4",{attrs:{id:"foreach不支持break-continue-return等"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#foreach不支持break-continue-return等"}},[a._v("#")]),a._v(" forEach不支持break, continue, return等")]),a._v(" "),r("h4",{attrs:{id:"使用for-of可以成功遍历数组的值-而不是索引-不会遍历原型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用for-of可以成功遍历数组的值-而不是索引-不会遍历原型"}},[a._v("#")]),a._v(" 使用for of可以成功遍历数组的值, 而不是索引, 不会遍历原型")])])}),[],!1,null,null,null);t.default=e.exports}}]);